module XmlStructLoader

using Reexport
using Dates
using TimeZones
using Parsers
using Memoization
using AbstractTrees
using AbstractTrees: parent, isroot
using EzXML
using AbstractXsdTypes

include(joinpath("xml_parser", "xml_parser.jl"))
include("xml_module_utilities.jl")
include("precompilation.jl")

export load, import_module_from_xml, use_module_from_xml

"""
	load(xml_path::AbstractString, module_ref::Module; validate::Bool=true)

Load the given XML file into the structs defined in the given module and return the loaded struct.
The module has to be generated by XsdToStruct.jl.
By default the loader will validate if the data in the given XML conforms to the restrictions specified in the XSD.
To skip this validation the keyword argument `validate`` can be set to false.

# Examples
```julia-repl
julia> using XmlStructLoader
julia> include(joinpath("path", "to", "xsd", "module.jl"))
julia> using .XsdModule
julia> load(joinpath("path", "to", "xml", "file.xml"), XsdModule)
```
or:
```julia-repl
julia> using XmlStructLoader
julia> include(joinpath("path", "to", "xsd", "module.jl"))
julia> import .XsdModule
julia> load(joinpath("path", "to", "xml", "file.xml"), XsdModule)
```
or to skip validation:
```julia-repl
julia> using XmlStructLoader
julia> include(joinpath("path", "to", "xsd", "module.jl"))
julia> using .XsdModule
julia> load(joinpath("path", "to", "xml", "file.xml"), XsdModule, validate=false)
```
"""
function load(xml_path::AbstractString, module_ref::Module; validate::Bool = true)
    local loaded_xml
    open(xml_path) do xml_io
        return loaded_xml = load(xml_io, module_ref, validate = validate)
    end
    return loaded_xml
end

load(xml_io::IO, module_ref::Module; validate::Bool = true) =
    construct_xml_object(xml_io, module_ref, validate = validate)

"""
	load(xml_path::AbstractString, module_path::AbstractString; validate::Bool=true)

Load the given XML file into the structs defined in the given module and return the loaded struct.
The module has to be generated by XsdToStruct.jl.
By default the loader will validate if the data in the given XML conforms to the restrictions specified in the XSD.
To skip this validation the keyword argument `validate` can be set to false.

# Examples
```julia-repl
julia> using XmlStructLoader
julia> load(joinpath("path", "to", "xml", "file.xml"), joinpath("path", "to", "xsd", "module.jl"))
```
"""
function load(xml_path::AbstractString, module_path::AbstractString; validate::Bool = true)
    local loaded_xml
    open(xml_path) do xml_io
        return loaded_xml = load(xml_io, module_path, validate = validate)
    end
    return loaded_xml
end

function load(xml_io::IO, module_path::AbstractString; validate::Bool = true)
    module_ref = import_module_from_xml(xml_io, module_path)
    loaded_xml = Base.@invokelatest construct_xml_object(xml_io, module_ref, validate = validate)
    return loaded_xml
end

"""
	import_module_from_xml(xml_path::AbstractString, module_path::AbstractString)::Module

Import the module from the .jl files in the module_path and return a reference to this module.
This reference can be passed into the load function.

# Examples
```julia-repl
julia> using XmlStructLoader
julia> module_ref = import_module_from_xml(path/to/xml/file.xml, path/to/module/module.jl)
```
"""
function import_module_from_xml(xml_path::AbstractString, module_path::AbstractString)::Module
    module_ref = open(xml_path) do xml_io
        return import_module_from_xml(xml_io, module_path)
    end
    return module_ref
end

import_module_from_xml(xml_io::IO, module_path::AbstractString)::Module =
    import_module(get_module_file_path(module_path), get_module_symbol(xml_io))

"""
	use_module_from_xml(xml_path::AbstractString, module_path::AbstractString)::Module

Use the module from the .jl files in the module_path and return a reference to this module.
This reference can be passed into the load function.

# Examples
```julia-repl
julia> using XmlStructLoader
julia> module_ref = use_module_from_xml(path/to/xml/file.xml, path/to/module/module.jl)
```
"""
function use_module_from_xml(xml_path::AbstractString, module_path::AbstractString)::Module
    module_ref = open(xml_path) do xml_io
        return use_module_from_xml(xml_io, module_path)
    end
    return module_ref
end

use_module_from_xml(xml_io::IO, module_path::AbstractString)::Module =
    use_module(get_module_file_path(module_path), get_module_symbol(xml_io))

end # module XmlStructLoader
